# PAN-TRAPS-8-MIB PANTRAPS8MIB

my $VERBOSE = 0;
our @commands = ();

sub get_host_from_ip {
  my ($ip) = @_;
  my $num_ip = int(sprintf "%d%03d%03d%03d", split /\./, $ip);
  my @ips = (
10000000011,
  );
  my @pointers = (
["pa_b", "os_paloalto", "PAN-TRAPS-MIB"],
  );

  my $found = 0;
  my ($left, $right) = (0, scalar(@ips) - 1);
  my $idx;
  while ($left <= $right) {
    $idx = int(($left + $right)/2);
    if ($ips[$idx] < $num_ip) {
      $left = $idx + 1;
    } elsif ($ips[$idx] > $num_ip) {
      $right = $idx - 1;
    } else {
      $found = 1;
      last;
    }
  }
  if ($found) {
    return $pointers[$idx];
  } else {
    return undef;
  }
}

sub replace_address {
  my ($address, $originating_variable, $variables) = @_;
  if ($originating_variable =~ /^\$(\d+)$/) {
    my $ip_var = $variables->[$1-1];
    if ($ip_var =~ /[\d\.]+/) {
      my $hostname = get_host_from_ip($ip_var);
      return $hostname ? $ip_var : $address;
    } # else man koennte mit hostnamen rumprobieren
  }
}

sub prepare_submit_command {
  my ($address, $trap, $recovers, $severity, $text) = @_;
  $text =~ s/[^[:ascii:]]//g;
  $trap =~ s/[^[:ascii:]]//g;;
  if (my $info = get_host_from_ip($address)) {
    my $command = sprintf "COMMAND [%d] PROCESS_SERVICE_CHECK_RESULT;%s;%s;%d;%s",
        time, $info->[0],
        $info->[1].'_traps_'.$info->[2].'_'.$trap,
        $severity,
        $text;
    push(@commands, $command) if $severity != -1;
    if ($recovers) {
      # alle bisherigen <dieserhost>;recovers aus commands loeschen
      # alle, nicht-ok, aber auch die ok. Ist zwar schade um die Historie
      # aber wer's genau wissen will, muss sich durch die traps.log fressen
      my $to_delete = sprintf ";%s;%s;", $info->[0], $info->[1].'_traps_'.$info->[2].'_'.$recovers;
      @commands = map {
        if (index($_, $to_delete) == -1) {
          $_;
        } elsif (index($_, 'UN') == 0) {
          $_; # already UN
        } else {
          'UN'.$_;
        }
      } @commands;
      my $command = sprintf "COMMAND [%d] PROCESS_SERVICE_CHECK_RESULT;%s;%s;%d;%s",
          time, $info->[0],
          $info->[1].'_traps_'.$info->[2].'_'.$recovers,
          0,
          'recovered by '.$trap.($severity == -1 ? ' ('.$text.')' : '');
      push(@commands, $command);
    }
  }
  return $text;
}

sub get_variables {
  my ($subtraps) = @_;
  my @subtraps = map {
    # .... "____.1.3.6.1.4.1.1139.102.0.1.2 "Info"____.1.3.6....
    # uebrig bleibt Info ohne Anfuehrungszeichen
    if (/^"(.*)"$/) {
      $1;
    } else {
      $_;
    }
  } map {
      /^[\d\.]+\s+(.*)$/; $1;
  } split(/____/, $subtraps);
  return @subtraps;
}

sub snmptt_resolve {
  my ($sys, $text, $variables) = @_;
  my $subtraps = join(", ", @{$variables});
  foreach my $index (reverse 1..scalar(@{$variables})) {
    $text =~ s/\$$index/$variables->[$index-1]/g;
  }
  $text =~ s/\$\*/$subtraps/g;
  return $text;
}

sub match_matches {
  my ($mode, $rules, $variables) = @_;
  my @rules = split("____", $rules);
  my $rulehits = 0;
  foreach my $rule (@rules) {
    if ($rule =~ /^\$(\d+):\s*!\s*(\w+)/) {
      # MATCH $x: ! n
      $rulehits +=1 if $variables->[$1-1] ne $2;
    } elsif ($rule =~ /^\$(\d+):\s*(\w+)/) {
      # MATCH $x: n
      $rulehits +=1 if $variables->[$1-1] eq $2;
    } elsif ($rule =~ /^\$(\d+):\s*!\s*\((.*)\)\s*i\*$/) {
      # MATCH $x: ! (reg) i
      $rulehits += 1 if $variables->[$1-1] !~ /$2/i;
    } elsif ($rule =~ /^\$(\d+):\s*!ÅŸ*\((.*)\)\s*$/) {
      # MATCH $x: ! (reg)
      $rulehits += 1 if $variables->[$1-1] !~ /$2/;
    } elsif ($rule =~ /^\$(\d+):\s*\((.*)\)\s*i\s*$/) {
      # MATCH $x: (reg) i
      $rulehits += 1 if $variables->[$1-1] =~ /$2/i;
    } elsif ($rule =~ /^\$(\d+):\s*\((.*)\)\s*$/) {
      # MATCH $x: (reg)
      $rulehits += 1 if $variables->[$1-1] =~ /$2/;
    } elsif ($rule =~ /^\$(\d+):\s*!\s*<\s*(\d+)\s*$/) {
      # MATCH $x: ! < n
      $rulehits += 1 if $variables->[$1-1] >= $2;
    } elsif ($rule =~ /^\$(\d+):\s*<\s*(\d+)\s*$/) {
      # MATCH $x: < n
      $rulehits += 1 if $variables->[$1-1] < $2;
    } elsif ($rule =~ /^\$(\d+):\s*!\s*>\s*(\d+)\s*$/) {
      # MATCH $x: ! > n
      $rulehits += 1 if $variables->[$1-1] <= $2;
    } elsif ($rule =~ /^\$(\d+):\s*>\s*(\d+)\s*$/) {
      # MATCH $x: > n
      $rulehits += 1 if $variables->[$1-1] > $2;
    } elsif ($rule =~ /^\$(\d+):\s*!\s*(\d+)-(\d+)\s*$/) {
      # MATCH $x: ! n-n
      $rulehits += 1 if $variables->[$1-1] < $2 || $variables->[$1-1] > $3;
    } elsif ($rule =~ /^\$(\d+):\s*(\d+)-(\d+)\s*$/) {
      # MATCH $x: n-n
      $rulehits += 1 if $variables->[$1-1] >= $2 && $variables->[$1-1] <= $3;
    } else {
      printf STDERR "unknown rule __%s__\n", $rule;
    }
  }
  return 1 if $mode eq 'and' && $rulehits == scalar(@rules); # all of them
  return 1 if $mode eq 'or' && $rulehits; # any of them
  return 0;
}

$options = 'report=short,supersmartpostscript';

@searches = (
{
  tag => 'PAN-TRAPS-8-MIB',
  logfile => $ENV{OMD_ROOT}.'/var/log/snmp/traps.log',
  rotation => '^%s\.((1)|([2-9]+\.gz))$',
  prefilter => '\.1\.3\.6\.1\.4\.1\.25461\.2\.1\.3\.2\.0\.',
  criticalpatterns => '^\[(.*?)\] summary: .*UDP: \[([\.\d]+)\].*?____([\.\d]+ .*?)____\.1\.3\.6\.1\.6\.3\.1\.1\.4\.1\.0\s+([\.\d]+)____(.*?)$',
  script => sub {
    my $address = $ENV{CHECK_LOGFILES_CAPTURE_GROUP2};
    my $trap_oid = $ENV{CHECK_LOGFILES_CAPTURE_GROUP4};
    my $flat_trap = $ENV{CHECK_LOGFILES_CAPTURE_GROUP.$ENV{CHECK_LOGFILES_CAPTURE_GROUPS}};
    my $severity = undef;
    my $resolved_text = undef;
    my $known_event = 0;
    my $event_name = undef;
    my $event_text = undef;
    my $event_recovers = undef;
    my $nagioslevel = undef;
    my @variables = get_variables($flat_trap);

    if (".1.3.6.1.4.1.25461.2.1.3.2.0.2" eq $trap_oid) {
      $known_event = 1;
      $event_name = 'panConfigTrap';
      $event_text = 'A configuratioon event trap. $*';
      $event_recovers = '';
      $nagioslevel = 0;
      $originating_ip = '';
    } elsif (".1.3.6.1.4.1.25461.2.1.3.2.0.911" eq $trap_oid) {
      $known_event = 1;
      $event_name = 'panHWPsInsertedTrap';
      $event_text = 'Power supply inserted $*';
      $event_recovers = '';
      $nagioslevel = 0;
      $originating_ip = '';
    } elsif (".1.3.6.1.4.1.25461.2.1.3.2.0.913" eq $trap_oid) {
      $known_event = 1;
      $event_name = 'panHWPsFailureTrap';
      $event_text = 'Power supply failure $*';
      $event_recovers = '';
      $nagioslevel = 2;
      $originating_ip = '';
    } elsif (".1.3.6.1.4.1.25461.2.1.3.2.0.51531" eq $trap_oid) {
      $known_event = 1;
      $event_name = 'panROUTINGRoutedBGPPeerEnterEstablishedTrap';
      $event_text = 'BGP peer session enters established state. $*';
      $event_recovers = 'panROUTINGRoutedBGPPeerLeftEstablishedTrap';
      $nagioslevel = 0;
      $originating_ip = '';
    } elsif (".1.3.6.1.4.1.25461.2.1.3.2.0.1532" eq $trap_oid) {
      $known_event = 1;
      $event_name = 'panROUTINGRoutedBGPPeerLeftEstablishedTrap';
      $event_text = 'BGP peer session left established state. $*';
      $event_recovers = '';
      $nagioslevel = 0;
      $originating_ip = '';
    } elsif (".1.3.6.1.4.1.25461.2.1.3.2.0.3503" eq $trap_oid) {
      $known_event = 1;
      $event_name = 'panBFDAdminDownTrap';
      $event_text = 'Administrative down $*';
      $event_recovers = '';
      $nagioslevel = 0;
      $originating_ip = '';
    }
    if (! defined $severity && $known_event) {
      # there are no sub-events at all or none of them matched
      $resolved_text = snmptt_resolve($address, $event_text, \@variables);
      $severity = $nagioslevel;
    }
    if ($known_event) {
      if ($originating_ip) {
        $address = replace_address($address, $originating_ip, \@variables);
      }
      my $sub =  prepare_submit_command($address, $event_name, $event_recovers, $severity, $resolved_text);
      printf "sub %s\n", $sub;
      return 2;
    } else {
      return 0;
    }
  },
  options => 'supersmartscript,capturegroups,noprotocol,noperfdata',
},
);

$postscript = sub {
  if (@commands) {
    my $submitted = 0;
    my $last_command = "";
    if (scalar(@commands)) {
      open SPOOL, ">".$ENV{OMD_ROOT}.'/tmp/PAN-TRAPS-8-MIB.cmds';
      foreach (map { /COMMAND (.*)/; $1; } grep { /^COMMAND/ } @commands) {
        if ($_ eq $last_command) {
          next;
        } else {
          printf SPOOL "%s\n", $_;
          $submitted++;
          $last_command = $_;
        }
      }
      close SPOOL;
      if ("nagios.cmd" eq "nagios.cmd") {
        open CMD, ">".$ENV{OMD_ROOT}.'/tmp/run/nagios.cmd';
        printf CMD "[%lu] PROCESS_FILE;%s;1\n", time, $ENV{OMD_ROOT}.'/tmp/PAN-TRAPS-8-MIB.cmds';
        close CMD;
      } elsif ("nagios.cmd" eq "naemon.cmd") {
        open CMD, ">".$ENV{OMD_ROOT}.'/tmp/run/naemon.cmd';
        printf CMD "[%lu] PROCESS_FILE;%s;1\n", time, $ENV{OMD_ROOT}.'/tmp/PAN-TRAPS-8-MIB.cmds';
        close CMD;
      }
      #open CMD, ">".$ENV{OMD_ROOT}.'/tmp/run/live';
    }
    if ($submitted) {
      printf "OK - found %d traps (%d submitted) | traps=%d submitted=%d\n", scalar(@commands), $submitted, scalar(@commands), $submitted;
      printf "%s\n", join("\n", @commands);
      return 0;
    } else {
      printf "OK - found %d traps, all of them were harmless\n", scalar(@commands);
      return 0;
    }
  } else {
    printf "OK - found no new traps | traps=0 submitted=0\n";
    return 0;
  }
};
